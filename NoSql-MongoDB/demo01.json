use classwork;
show collections;

db.dept.insert({_id:10,dname:"ACCOUNTING",loc:"NEW YORK"});
db.dept.insert({_id:20,dname:"RESEARCH",loc:"DALLAS"});
db.dept.insert({_id:30,dname:"SALES",loc:"CHICAGO"});
db.dept.insert({_id:40,dname:"OPERATIONS",loc:"BOSTON"});

db.emp.insert({_id:7369,ename:"SMITH",job:"CLERK",mgr:7902,sal:800.00,deptno:20, comm:null});
db.emp.insert({_id:7499,ename:"ALLEN",job:"SALESMAN",mgr:7698,sal:1600.00,comm:300.00,deptno:30});
db.emp.insert({_id:7521,ename:"WARD",job:"SALESMAN",mgr:7698,sal:1250.00,comm:500.00,deptno:30});
db.emp.insert({_id:7566,ename:"JONES",job:"MANAGER",mgr:7839,sal:2975.00,deptno:20, comm:null});
db.emp.insert({_id:7654,ename:"MARTIN",job:"SALESMAN",mgr:7698,sal:1250.00,comm:1400.00,deptno:30});
db.emp.insert({_id:7698,ename:"BLAKE",job:"MANAGER",mgr:7839,sal:2850.00,deptno:30});
db.emp.insert({_id:7782,ename:"CLARK",job:"MANAGER",mgr:7839,sal:2450.00,deptno:10});
db.emp.insert({_id:7788,ename:"SCOTT",job:"ANALYST",mgr:7566,sal:3000.00,deptno:20});
db.emp.insert({_id:7839,ename:"KING",job:"PRESIDENT",sal:5000.00,deptno:10});
db.emp.insert({_id:7844,ename:"TURNER",job:"SALESMAN",mgr:7698,sal:1500.00,comm:0.00,deptno:30});
db.emp.insert({_id:7876,ename:"ADAMS",job:"CLERK",mgr:7788,sal:1100.00,deptno:20, comm:null});
db.emp.insert({_id:7900,ename:"JAMES",job:"CLERK",mgr:7698,sal:950.00,deptno:30, comm:null});
db.emp.insert({_id:7902,ename:"FORD",job:"ANALYST",mgr:7566,sal:3000.00,deptno:20});
db.emp.insert({_id:7934,ename:"MILLER",job:"CLERK",mgr:7782,sal:1300.00,deptno:10});

show collections;


* relational operations

// find all SALESMAN
db.emp.find({job:"SALESMAN"})

// find all CLERK
db.emp.find({job:"CLERK"})

// find all emps in dept 30
db.emp.find({deptno:30})

// find all emps not in dept 30
db.emp.find({deptno : {$ne:30}})

// find all emps whose sal < 2500
db.emp.find({sal : {$lt:2500}})

// find all emps who have comm field.
db.emp.find({comm : {$exists:true}}) // returns if column is there irrespective of value as null

db.emp.find({comm : {$exists:""}})

// find all emps who don't comm field.
db.emp.find({comm : {$exists:false}})

// find all emps who have comm = null.
db.emp.find({comm : {$type:10}}) // 10 here used internally to represent Null values, for more info please visit https://docs.mongodb.com/manual/reference/bson-types/index.html

db.emp.find({comm :null}) // not correct way, as it shows the emps where the comm is missing

// find all emps whose name contains 'M'
db.emp.find({ename : /M/})

// find all emps whose name starts with 'M'
db.emp.find({ename : /^M/})
//^ : starts with
//$ : end with
// /i case insensitive

// find all emps whose name contains 'A' twice.
db.emp.find({ename : /A.*A/})

// find all emps whose name ends with S. the comparison should be case sensitive
db.emp.find({ename : /S$/})

// find all emps whose name ends with S. the comparison should be case insensitive
db.emp.find({ename : /s$/i})

// find the name JAMEs (case insensitive)
db.emp.find({ ename: /^JAMEs$/i })

// find emp whose name is JAMES or MILLER.
db.emp.find({ ename: {$in : ["JAMES", "MILLER"]} })

// find emp who is not SALESMAN, MANAGER or PRESIDENT.
db.emp.find({ job: {$nin : ["SALESMAN", "MANAGER","PRESIDENT"]} })

// find emp who is SALESMAN, MANAGER or PRESIDENT.
db.emp.find({ job: {$in : ["SALESMAN", "MANAGER","PRESIDENT"]} })

// ### * logical operators ###

// find all CLERK in dept 30.
db.emp.find({$and: [{job: "CLERK"}, {deptno: 30}]})

// find emps having sal more than 4000 or they are ANALYST.
db.emp.find({$or: [
    {job: "ANALYST"}, 
    {sal: {$gt: 4000}}
    ]})


// find emps which are not in dept 20 and not SALESMAN.
db.emp.find({$and: [
    {deptno: {$ne : 20}}, 
    {job: {$ne: "SALESMAN"}}
    ]})

// find all MANAGER in dept 30 or all SALESMAN in dept 30 having sal <= 1500
db.emp.find({$or: [
    {$and: [
        {job: "MANAGER" }, 
        {deptno: 30}
    ]}, 
    {$and: [
        {job: "SALESMAN" }, 
        {deptno: 30}, 
        {sal: {$lte: 1500}}]
    }
    ]
})


// or
db.emp.find({
    $or: [
        {job: "MANAGER", deptno: 30},
        { job: "SALESMAN", deptno: 30, sal: {$lte: 1500}}
    ]
})

// find all emps who have comm value.
db.emp.find({
    $and : [
        {comm: {$exists: true}},
        {comm: {$not: {$type: 10 }}}
    ]
})


// * projection

// display emp details _id, ename, job and sal
db.emp.find({}, {ename: 1, job: 1, sal: 1, _id: 0}) 

can not mix 1 and 0 except _id field

// display emp details except mgr, sal, comm, job
db.emp.find({}, {mgr: 0, sal: 0, comm: 0, job: 0})

// display emp details ename, mgr
db.emp.find({}, {ename: 1, mgr: 1, _id: 0}) 

// display emp details _id, ename, deptno, sal; but skip mgr, job, comm
db.emp.find({}, {ename: 1, sal: 1, deptno: 1, mgr: 0, job: 0, comm: 0}) // Projection cannot have a mix of inclusion and exclusion. (except _id)

db.emp.find({}, {ename: 1, sal: 1, deptno: 1})

// display emp details ename, deptno, sal without _id.
db.emp.find({}, {ename: 1, sal: 1, deptno: 1, _id: 0})

// find the employees in dept 30,  sorted by sal and show ename, sal without _id
db.emp.find({deptno: 30}, {ename: 1, sal: 1, _id: 0}).sort({sal: 1})


// * Aggregation pipeline

// sum of sal per job
db.emp.aggregate([
    // group by stage
    {
        $group: {
            _id: '$job',
            totalSalary: {
                $sum: '$sal'
            }
        }
    }
])
// _id is compulsory in the group by clause

// avg of sal per dept
db.emp.aggregate([
    {
        $group: {
            _id: '$deptno',
            avgSalary: {
                $avg: '$sal'
            }
        }
    }
])

// print total sal, avg sal, max sal, min sal, num of emps per job
db.emp.aggregate([
    {
        $group: {
            _id: '$job',
            totalSal : {$sum: "$sal"},
            avgSal : {$avg: "$sal"},
            maxSal : {$max: "$sal"},
        }
    }
])


// print all jobs for which total sal is more than 5700
db.emp.aggregate([
    {
        $group: {
            _id: "$job",
            salary : {$sum: "$sal" }
        }
    },
    {
        $match: {
            salary: { $gt: 5700}
        }
    }
])

// display depts' total sal in desc order
db.emp.aggregate([
    {
        $group: {
            _id: "$deptno",
            salary : {$sum: "$sal" }
        }
    },
    {
        $sort: {
            salary: -1
        }
    }
])

// find the dept that spends max on sal
db.emp.aggregate([
    {
        $group: {
            _id: "$deptno",
            salary : {$sum: "$sal" }
        }
    },
    {
        $sort: {
            salary: -1
        }
    },
    {
        $limit: 1
    }
])

// display ename, deptno & sal of all emps whose sal >= 2500

db.emp.aggregate([
    {
        $match: {
            sal : {
                $gte: 2500
            }
        }
    },
    {
        $project: {
            ename: 1,
            deptno: 1,
            sal: 1,
            _id: 0
        }
    }
])

// analyse data per dept per job
db.emp.aggregate([
    {
       $group: {
           _id: {
               deptno: '$deptno',
               job: '$job'
           },
           count: {
                $sum: 1
           }
       }
    }
])

// find the job with max AVG sal
db.emp.aggregate([
    {
       $group: {
           _id: '$job',
           avg:{ $avg: '$sal'}
       }
    },
    {$sort : {avg : -1}},
    {$limit : 1}
])

// find number of managers, analysts and clerks in company
db.emp.aggregate([
    {
       $match: {
           job: {$in : ['MANAGER', 'ANALYST', 'CLERK']}
       }
    },
    {
        $group: {
            _id: '$job',
            count: { $sum: 1 }
        }
    }
])



// print ename and dept
db.emp.aggregate([
    {
        $lookup :{
            from: 'dept',
            localField: 'deptno',
            foreignField: '_id',
            as: 'deptinfo'
        }
    },
    {
        $project : {ename: 1, deptinfo: 1}
    }
])

// print depts and emps in that dept
db.dept.aggregate([
    {
        $lookup :{
            from: 'emp',
            localField: '_id',
            foreignField: 'deptno',
            as: 'emps'
        }
    }
])

// print emp name and his manager details
db.emp.aggregate([
    {
        $lookup :{
            from: 'emp',
            localField: 'mgr',
            foreignField: '_id',
            as: 'mgrInfo'
        }
    },
    {
        $project : {ename: 1, mgrInfo: 1}
    }
])


// print depts and emps names in that dept
db.dept.aggregate([
    {
        $lookup :{
            from: 'emp',
            localField: '_id',
            foreignField: 'deptno',
            as: 'emps'
        }
    },
    {
        $project : {ename: 1, deptno: 1, 'emps.ename': 1}
    }
])




db.emp.aggregate([
    {
        $lookup :{
            from: 'dept',
            localField: 'deptno',
            foreignField: '_id',
            as: 'deptinfo'
        }
    },
    {
        $unwind: '$deptinfo'    // get as object instead of arrays
    },
    { 
        $addFields:{        // add intermediate field
            dname: '$deptinfo.dname' ,
            location: '$deptinfo.loc'
        }
    },
    {
        $project : {ename: 1, 'dname': 1, location: 1}
    }
])


// create another collection with result
db.emp.aggregate([
    {
        $project: { ename: 1, sal: 1 }
    },
    {
        // create new collection with the processed result
        $out: 'emp1'
    }
])



