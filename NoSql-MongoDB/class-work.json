db.stats() ==> shows db stats

{
        "db" : "classwork",
        "collections" : 2,
        "views" : 0,
        "objects" : 18,
        "avgObjSize" : 88.94444444444444,
        "dataSize" : 1601,
        "storageSize" : 40960,
        "numExtents" : 0,
        "indexes" : 2,
        "indexSize" : 40960,
        "scaleFactor" : 1,
        "fsUsedSize" : 98432196608,
        "fsTotalSize" : 208003481600,
        "ok" : 1
}

create collection:
db.createCollection('person')

Insert record:
db.person.insert({name:"Sachin", address: "Pune", phone: +91999999})

list all records:
db.person.find()

DB stats
db.stats()

table stats
db.person.stats()

db.emp.find().limit(2)
db.emp.find().skip(2) // skips first 2 record
db.emp.find().count() // count of the records in the document

db.emp.find().limit(2).toArray() // toArray returns array
[
        {
                "_id" : 7369,
                "ename" : "SMITH",
                "job" : "CLERK",
                "mgr" : 7902,
                "sal" : 800,
                "deptno" : 20,
                "comm" : null
        },
        {
                "_id" : 7499,
                "ename" : "ALLEN",
                "job" : "SALESMAN",
                "mgr" : 7698,
                "sal" : 1600,
                "comm" : 300,
                "deptno" : 30
        }
]


//foreach 

db.emp.find().forEach(function(document) {
    print(`${document.ename} has salary: ${document.sal}`)
})

db.emp.find().sort({ename:-1}) //sort decending by ename
db.emp.find().sort({ename:1}) //sort ascending

db.emp.find().sort({sal:-1}) //sort decending by sal

db.emp.find().sort({sal:-1, ename: 1}) sort by name and sal

db.person.drop() //drops collection


// find by _id
 db.person.find({_id: ObjectId('5e11903ba5f61c0dde96e3a5')})

//  insert
db.product.insert({name: "product1", price: 100, quentity: 1})

// Update
// Set value
 db.person.update({_id: ObjectId('5e11903ba5f61c0dde96e3a5')}, {$set : {address: "Mumbai"}})

// increment the count
db.product.update({_id: ObjectId("5e1191cfa5f61c0dde96e3a9")}, {$inc : {quentity: 1}})

// decrement the count
db.product.update({_id: ObjectId("5e1191cfa5f61c0dde96e3a9")}, {$inc : {quentity: -1}})


db.students.insert({name: "Sachin", marks: []})
db.students.update({ _id:  ObjectId("5e1193cfa5f61c0dde96e3aa")}, { $push : { marks: 40 } })
db.students.update({ _id:  ObjectId("5e1193cfa5f61c0dde96e3aa")}, { $push : { marks: 60 } })


// push multiple values in arrays:
db.students.update({ _id:  ObjectId("5e1193cfa5f61c0dde96e3aa")}, { $push : 
    { marks: 
        {$each: [35, 40, 61, 62, 63]}
    } 
})

// remove value
db.students.update({ _id: ObjectId("5e1193cfa5f61c0dde96e3aa")}, { $pull: { marks: 40 }})

db.students.update({ _id:  ObjectId("5e1193cfa5f61c0dde96e3aa")}, { $push : 
    { marks: 
        {$each: [40, 40, 40]}
    } 
})

db.students.update({ _id: ObjectId("5e1193cfa5f61c0dde96e3aa")}, { $pull: { marks: 40 }}) // removes all the records with matching value as 40


//sets array size
db.students.update(
{ _id: ObjectId("5e1193cfa5f61c0dde96e3aa")}, 
{ $push : { marks: { $each: [60, 70, 80, 90, 75, 65, 60, 70, 50],  $slice: 5 } } })


// delete record
db.students.remove({name: "Sachin"})

//delete all record
db.product.deleteMany({})

// drop collection
db.students.drop()




for (let index = 0; index < 1000000; index++) {
    db.person.insert({ name: 'person ' + index, address: 'address ' + index });
}


// get indexes

db.person.getIndexes()

db.person.find({_id: ObjectId('5e11bcbfa5f61c0dde986a4b')}).explain(true)


//create index
db.person.createIndex({name: 1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}

// drop index

db.person.dropIndex({name: 1})
{ "nIndexesWas" : 2, "ok" : 1 }

// composite index
db.person.createIndex({name: 1, address: 1})

// unique index
db.student.createIndex({email: 1}, {unique: true})


// time to live index
// geospacial indexes



// Capped collections
// fixed size collections
db.createCollection('logs', {capped: true, size: 1000}) // size in bytes


for (let index = 0; index < 1000; index++) {
    db.logs.insert({ time: new Date(), message: 'address ' + index });
}


// GridFS

mongofiles -d classwork  list 


additional topics
- Sharding
- Replica set [Horizontal Scaling]
- Geo Spatial queries/ operators
- 
